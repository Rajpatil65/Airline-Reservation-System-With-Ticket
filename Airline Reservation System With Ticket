package jdbc;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;

class Passenger {
    private int id;
    private String name;
    private String flightNumber;
    private String destination;

    public Passenger(int id, String name, String flightNumber, String destination) {
        this.id = id;
        this.name = name;
        this.flightNumber = flightNumber;
        this.destination = destination;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getFlightNumber() {
        return flightNumber;
    }

    public String getDestination() {
        return destination;
    }

    public String generateTicket() {
        return String.format(
                "----------------------------------\n" +
                        "        Airline Ticket\n" +
                        "----------------------------------\n" +
                        "Passenger ID: %d\n" +
                        "Name: %s\n" +
                        "Flight Number: %s\n" +
                        "Destination: %s\n" +
                        "----------------------------------\n" +
                        "  Thank you for flying with us!\n",
                id, name, flightNumber, destination
        );
    }

    @Override
    public String toString() {
        return String.format("ID: %d, Name: %s, Flight: %s, Destination: %s",
                id, name, flightNumber, destination);
    }
}

 class Airlinereservationsystemwithticket extends JFrame {
    private ArrayList<Passenger> passengers = new ArrayList<>();
    private int passengerIdCounter = 1;

    // Constructor
    public Airlinereservationsystemwithticket() {
        setTitle("Airline Reservation System");
        setSize(600, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Header Label
        JLabel header = new JLabel("Airline Reservation System", JLabel.CENTER);
        header.setFont(new Font("Arial", Font.BOLD, 22));
        add(header, BorderLayout.NORTH);

        // Buttons Panel
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout());

        JButton bookButton = new JButton("Book Ticket");
        JButton cancelButton = new JButton("Cancel Ticket");
        JButton viewButton = new JButton("View Passengers");
        JButton exitButton = new JButton("Exit");

        buttonPanel.add(bookButton);
        buttonPanel.add(cancelButton);
        buttonPanel.add(viewButton);
        buttonPanel.add(exitButton);

        add(buttonPanel, BorderLayout.SOUTH);

        // Main Content Area
        JTextArea outputArea = new JTextArea();
        outputArea.setEditable(false);
        outputArea.setFont(new Font("Courier New", Font.PLAIN, 14));
        JScrollPane scrollPane = new JScrollPane(outputArea);
        add(scrollPane, BorderLayout.CENTER);

        // Button Actions
        bookButton.addActionListener(e -> bookTicket(outputArea));
        cancelButton.addActionListener(e -> cancelTicket(outputArea));
        viewButton.addActionListener(e -> viewPassengers(outputArea));
        exitButton.addActionListener(e -> System.exit(0));

        setVisible(true);
    }

    // Book Ticket
    private void bookTicket(JTextArea outputArea) {
        JTextField nameField = new JTextField();
        JTextField flightField = new JTextField();
        JTextField destinationField = new JTextField();

        Object[] fields = {
                "Name:", nameField,
                "Flight Number:", flightField,
                "Destination:", destinationField
        };

        int option = JOptionPane.showConfirmDialog(this, fields, "Book Ticket", JOptionPane.OK_CANCEL_OPTION);

        if (option == JOptionPane.OK_OPTION) {
            String name = nameField.getText();
            String flightNumber = flightField.getText();
            String destination = destinationField.getText();

            if (!name.isEmpty() && !flightNumber.isEmpty() && !destination.isEmpty()) {
                Passenger newPassenger = new Passenger(passengerIdCounter++, name, flightNumber, destination);
                passengers.add(newPassenger);
                String ticket = newPassenger.generateTicket();
                outputArea.append(ticket + "\n");
                JOptionPane.showMessageDialog(this, ticket, "Ticket Generated", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "All fields must be filled!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // Cancel Ticket
    private void cancelTicket(JTextArea outputArea) {
        String idString = JOptionPane.showInputDialog(this, "Enter Passenger ID to Cancel Ticket:");
        if (idString != null) {
            try {
                int id = Integer.parseInt(idString);
                boolean removed = passengers.removeIf(passenger -> passenger.getId() == id);

                if (removed) {
                    outputArea.append("Ticket cancelled successfully for Passenger ID: " + id + "\n\n");
                } else {
                    JOptionPane.showMessageDialog(this, "Passenger ID not found!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid ID entered!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // View Passengers
    private void viewPassengers(JTextArea outputArea) {
        if (passengers.isEmpty()) {
            outputArea.append("No passengers found.\n\n");
        } else {
            outputArea.append("--- Passenger List ---\n");
            for (Passenger passenger : passengers) {
                outputArea.append(passenger + "\n");
            }
            outputArea.append("\n");
        }
    }

    // Main Method
    public static void main(String[] args) {
        SwingUtilities.invokeLater(Airlinereservationsystemwithticket::new);
    }
}
